This is an example of create entity from "[Person].[Address]" table.

```csharp

using Microsoft.EntityFrameworkCore;
using NetTopologySuite.Geometries;
using System.ComponentModel.DataAnnotations.Schema;

namespace AddressQueryExample
{
    public class Program
    {
        public static async Task Main(string[] args)
        {
            using (var context = new AdventureWorks2022DbContext())
            {
                // Assuming the AdventureWorks2022DbContext is set up with the correct connection string
                // and has been configured to include the necessary entities and relationships.

                // Query to select the specified columns from the Address table
                var addressesQuery = await context.Addresses.Take(10).ToListAsync();

                // Execute the query and iterate over the results
                foreach (var address in addressesQuery.Take(10))
                {
                    Console.WriteLine($"AddressID: {address.AddressID}, AddressLine1: {address.AddressLine1}, AddressLine2: {address.AddressLine2}, City: {address.City}, StateProvinceID: {address.StateProvinceID}, PostalCode: {address.PostalCode}, SpatialLocation: {address.SpatialLocation}, rowguid: {address.rowguid}, ModifiedDate: {address.ModifiedDate}");
                }
            }
        }
    }

    public class AdventureWorks2022DbContext : DbContext
    {
        public DbSet<Address> Addresses { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(
                "Server=DESKTOP-PDA3ULB;Database=AdventureWorks2022;Trusted_Connection=True;TrustServerCertificate=True;",
                x => x.UseNetTopologySuite()
            );
        }
    }

    [Table("Address", Schema = "Person")]
    public class Address
    {
        public int AddressID { get; set; }
        public string AddressLine1 { get; set; } = string.Empty;
        public string? AddressLine2 { get; set; }
        public string City { get; set; } = string.Empty;
        public int StateProvinceID { get; set; }
        public string PostalCode { get; set; } = string.Empty;
        public Point? SpatialLocation { get; set; }
        public Guid rowguid { get; set; }
        public DateTime ModifiedDate { get; set; }
    }
}

```